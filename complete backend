require("dotenv").config(); // Load environment variables
const express = require("express");
const axios = require("axios");
const bodyParser = require("body-parser");
const cors = require("cors");
const crypto = require("crypto");
const path = require("path");
const mysql = require("mysql");
const { Client } = require("ssh2");
const { body, validationResult } = require("express-validator"); // Input validation
const rateLimit = require("express-rate-limit"); // Rate limiting

const app = express();

// Middleware
app.use(bodyParser.json());
app.use(cors());
app.use(express.static(path.join(__dirname, "public"))); // Serve frontend files

// Rate Limiting (100 requests per 15 minutes per IP)
const limiter = rateLimit({
    windowMs: 15 * 60 * 1000, // 15 minutes
    max: 100, // Limit each IP to 100 requests per windowMs
    message: "Too many requests, please try again later."
});
app.use(limiter);

// Load sensitive credentials from .env file
const TILL_NUMBER = process.env.TILL_NUMBER;
const CONSUMER_KEY = process.env.CONSUMER_KEY;
const CONSUMER_SECRET = process.env.CONSUMER_SECRET;
const CALLBACK_URL = process.env.CALLBACK_URL;

// MySQL Database Configuration
const db = mysql.createPool({
    connectionLimit: 10,
    host: process.env.DB_HOST,
    user: process.env.DB_USER,
    password: process.env.DB_PASSWORD,
    database: process.env.DB_NAME
});

// Function to query database safely
function queryDatabase(sql, values) {
    return new Promise((resolve, reject) => {
        db.getConnection((err, connection) => {
            if (err) {
                console.error("Database connection error:", err);
                return reject(err);
            }
            connection.query(sql, values, (error, results) => {
                connection.release();
                if (error) return reject(error);
                resolve(results);
            });
        });
    });
}

// Router Configuration
const ROUTER_IP = process.env.ROUTER_IP;
const ROUTER_USER = process.env.ROUTER_USER;
const ROUTER_PASSWORD = process.env.ROUTER_PASSWORD;

// Function to grant WiFi access via SSH
function grantWiFiAccess(username, password) {
    return new Promise((resolve, reject) => {
        const ssh = new Client();
        ssh.on("ready", () => {
            ssh.exec(`/ip hotspot user add name=${username} password=${password} profile=default`, (err, stream) => {
                if (err) {
                    console.error("SSH Command Error:", err);
                    ssh.end();
                    return reject(err);
                }

                let output = "";
                let error = "";

                stream.on("data", data => output += data.toString());
                stream.stderr.on("data", data => error += data.toString());

                stream.on("close", () => {
                    ssh.end();
                    if (error) {
                        console.error("SSH Error:", error);
                        reject(error);
                    } else {
                        console.log("SSH Output:", output);
                        resolve(true);
                    }
                });
            });
        }).connect({
            host: ROUTER_IP,
            username: ROUTER_USER,
            password: ROUTER_PASSWORD,
            port: 22,
            readyTimeout: 5000 // 5-second timeout
        });

        ssh.on("error", (err) => {
            console.error("SSH Connection Error:", err);
            ssh.end();
            reject(err);
        });
    });
}

// Function to get M-Pesa Access Token
async function getAccessToken() {
    const auth = Buffer.from(`${CONSUMER_KEY}:${CONSUMER_SECRET}`).toString("base64");
    const response = await axios.get("https://api.safaricom.co.ke/oauth/v1/generate?grant_type=client_credentials", {
        headers: { Authorization: `Basic ${auth}` }
    });
    return response.data.access_token;
}

// Generate a unique code for the transaction
function generateUniqueCode() {
    return "WIFI" + crypto.randomBytes(3).toString("hex").toUpperCase();
}

// Endpoint to initiate the payment
app.post("/api/initiate-payment", [
    body("phone").isMobilePhone().withMessage("Invalid phone number"),
    body("amount").isFloat({ gt: 0 }).withMessage("Amount must be greater than 0")
], async (req, res) => {
    // Validate input
    const errors = validationResult(req);
    if (!errors.isEmpty()) {
        return res.status(400).json({ success: false, errors: errors.array() });
    }

    const { phone, amount } = req.body;

    try {
        const token = await getAccessToken();

        const response = await axios.post(
            "https://api.safaricom.co.ke/mpesa/stkpush/v1/processrequest",
            {
                BusinessShortCode: TILL_NUMBER,
                TransactionType: "CustomerPayBillOnline",
                Amount: amount,
                PartyA: phone,
                PartyB: TILL_NUMBER,
                PhoneNumber: phone,
                CallBackURL: CALLBACK_URL,
                AccountReference: "WiFiPayment",
                TransactionDesc: "WiFi Payment"
            },
            {
                headers: { Authorization: `Bearer ${token}` }
            }
        );

        res.json({ success: true, message: "Payment request sent", response: response.data });
    } catch (error) {
        console.error("Payment Initiation Error:", error.response?.data || error.message);
        res.status(500).json({ success: false, message: "Payment initiation failed", error: error.response?.data || error.message });
    }
});

// M-Pesa callback endpoint
app.post("/api/mpesa-callback", async (req, res) => {
    console.log("M-Pesa Callback Received:", JSON.stringify(req.body, null, 2)); // Log full payload
    const { Body } = req.body;

    if (Body?.stkCallback) {
        const { CheckoutRequestID, ResultCode, CallbackMetadata } = Body.stkCallback;

        if (ResultCode === 0) {
            const uniqueCode = generateUniqueCode();
            let phone = "UNKNOWN";
            let amount = 0;

            if (CallbackMetadata && CallbackMetadata.Item) {
                CallbackMetadata.Item.forEach(item => {
                    if (item.Name === "PhoneNumber") phone = item.Value;
                    if (item.Name === "Amount") amount = item.Value;
                });
            }

            await queryDatabase("INSERT INTO transactions (reference, phone, amount, status) VALUES (?, ?, ?, ?) ON DUPLICATE KEY UPDATE status=?",
                [uniqueCode, phone, amount, "PAID", "PAID"]);

            try {
                await grantWiFiAccess(uniqueCode, "randompassword123");
                console.log("WiFi access granted");
            } catch (err) {
                console.error("WiFi access error:", err);
            }
        } else {
            console.log("Payment failed.");
        }
    }
    res.json({ success: true, message: "Callback received" });
});

// Global Error Handler
app.use((err, req, res, next) => {
    console.error("Unhandled Error:", err);
    res.status(500).json({ success: false, message: "Internal Server Error" });
});

// Start server
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`Server running on port ${PORT}`);
});